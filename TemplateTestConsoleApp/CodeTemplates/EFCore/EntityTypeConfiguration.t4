<#@ template hostSpecific="true" debug="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>



<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#

    string StaticExtPropName = "ExtProp" ;
    string DynamicExtPropName = "ExtPropDynamic" ;
    string [] UseConfigure = new string [] { "Order", "OrderDetail"} ;

    var pp = EntityType.FindProperty(StaticExtPropName);
    var pp1 = EntityType.FindProperty(DynamicExtPropName);
    var bWantConfige = UseConfigure.Contains (EntityType.Name) ;
    //if ( false 11)
    //if ( pp != null || pp1 != null)
    //if (  !bWantConfige)
    if (!bWantConfige) 
        if ( pp == null && pp1 == null ) 
            return "" ;

#>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using <#= NamespaceHint #>;




namespace <#= NamespaceHint #>;
<#
    //System.Diagnostics.Debugger.Launch();
#>

public partial class <#= EntityType.Name #>Configuration : IEntityTypeConfiguration<<#= EntityType.Name #>>
{
    partial void MoreBuilderCalls (EntityTypeBuilder<<#= EntityType.Name #>> builder);


    public void Configure(EntityTypeBuilder<<#= EntityType.Name #>> builder)
    {

        MoreBuilderCalls (builder) ;


    }
}




<#+

Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType ;
Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions Options ;
System.String NamespaceHint ;



#>
