// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFTemplate.CodeTemplates.EFCore
{
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Text;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Design;
    using Microsoft.Extensions.DependencyInjection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class entityType : entityTypeBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("#nullable enable\r\n\r\n");
            
            #line 18 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    // This is the only code block you need to modify to configure the t4


    //  To debug the t4, uncomment the following line and set debug="true" at top of page
    
    //System.Diagnostics.Debugger.Launch();

 
    string StaticExtPropName = "ExtProp" ;
    string DynamicExtPropName = "ExtPropDynamic" ;
    string [] UseConfigure = new string [] { "Order", "OrderDetail"} ;

    string BaseClassSpec = "" ;
    string ListType = "List" ;
    string FieldAttribute = "" ;
    bool bMvvm = true ;



    if (bMvvm)
    {
        BaseClassSpec = " : ObservableValidator" ;
        ListType = "ObservableCollection" ;
        FieldAttribute = "[ObservableProperty] " ;
    }



            
            #line default
            #line hidden
            
            #line 47 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
 

        string FieldDef(object ctype, string name,  bool needsNullable, bool needsInitializer, bool mvvm )
        {
            //return "sisi" ;
            //return $"public {code.Reference(property.ClrType)} {needsNullable ? "?" : ""}   {property.Name} { get; set; } {needsInitializer ? " = null!;" : ""}
            //return $"public {code.Reference(property.ClrType)}  {(needsNullable ? "?" : "")}   {property.Name}  {{ get; set; }} {(needsInitializer ? " = null!; " : "" )}";
            //return $"public {ctype.ToString()}  {(needsNullable ? "?" : "")}   {property.Name}  {{ get; set; }} {(needsInitializer ? " = null!; " : "" )}";
              
            if (mvvm)
                return $"{FieldAttribute}\n   private {ctype.ToString()}{(needsNullable ? "?" : "")} _{name} {(needsInitializer ? " = null! " : "" ) };";
            else
                return $"{FieldAttribute}\n   public {ctype.ToString() }{(needsNullable ? "?" : "")} {name} {{ get; set; }} {(needsInitializer ? " = null!; " : "" )}";

                
        }

        string ToMvvmAttr ( string strAttr ) 
        {
            if ( bMvvm )
                return strAttr.Replace ("[", "[property:") ;
            else
                return strAttr ;
        }



            
            #line default
            #line hidden
            
            #line 74 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "Microsoft.EntityFrameworkCore",
        "System.Collections.ObjectModel",
        "System",
        "System.Collections.Generic"
    };

    if (Options.UseDataAnnotations)
    {
        usings.Add("System.ComponentModel.DataAnnotations");
        usings.Add("System.ComponentModel.DataAnnotations.Schema");

    }

    if (bMvvm) 
    {
        usings.Add("CommunityToolkit.Mvvm.ComponentModel");
    }


    if (!string.IsNullOrEmpty(NamespaceHint))
    {

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 109 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(NamespaceHint));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 111 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    }

    if (!string.IsNullOrEmpty(EntityType.GetComment()))
    {

            
            #line default
            #line hidden
            this.Write("/// <summary>\r\n/// ");
            
            #line 118 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.XmlComment(EntityType.GetComment())));
            
            #line default
            #line hidden
            this.Write("\r\n/// </summary>\r\n");
            
            #line 120 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    }

    if (Options.UseDataAnnotations)
    {
        foreach (var dataAnnotation in EntityType.GetDataAnnotations(annotationCodeGenerator))
        {
            var bEF8Only = false ;

            if (dataAnnotation.Type.Name == "PrimaryKeyAttribute") 
                bEF8Only = true ;
            if (bEF8Only )
            {

            
            #line default
            #line hidden
            this.Write("//#if NET8_0_OR_GREATER\r\n");
            
            #line 135 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Fragment(dataAnnotation)));
            
            #line default
            #line hidden
            this.Write("\r\n//#endif\r\n");
            
            #line 137 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

           
            }
            else
            {
            

            
            #line default
            #line hidden
            
            #line 144 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Fragment(dataAnnotation)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 145 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

            }
       }
    }

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 151 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    var pp = EntityType.FindProperty(StaticExtPropName);
    var pp1 = EntityType.FindProperty(DynamicExtPropName);
    var bWantConfige = UseConfigure.Contains (EntityType.Name) ;
    //if (  bWantConfige)
    if ( pp != null || pp1 != null || bWantConfige) 
    {

            
            #line default
            #line hidden
            this.Write("//#if NET8_0_OR_GREATER\r\n[EntityTypeConfiguration(typeof(");
            
            #line 160 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityType.Name));
            
            #line default
            #line hidden
            this.Write("Configuration))]\r\n//#endif\r\n");
            
            #line 162 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
  }
            
            #line default
            #line hidden
            this.Write("\r\npublic partial class ");
            
            #line 164 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n//#if MVVM\r\n                : ObservableValidator\r\n//#else\r\n//#endif\r\n{\r\n");
            
            #line 170 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    var firstProperty = true;
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {

        if ( property.Name == StaticExtPropName) 
            continue ;
            

        if ( property.Name == DynamicExtPropName) 
            continue ;

        if (!firstProperty)
        {
            WriteLine("");
        }

        if (!string.IsNullOrEmpty(property.GetComment()))
        {

            
            #line default
            #line hidden
            this.Write("    /// <summary>\r\n    /// ");
            
            #line 191 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.XmlComment(property.GetComment(), indent: 1)));
            
            #line default
            #line hidden
            this.Write("\r\n    /// </summary>\r\n");
            
            #line 193 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

        }

        if (Options.UseDataAnnotations)
        {
            var dataAnnotations = property.GetDataAnnotations(annotationCodeGenerator)
                .Where(a => !(a.Type == typeof(RequiredAttribute) && Options.UseNullableReferenceTypes && !property.ClrType.IsValueType));
            
           bool bIsIdentity = false ;

            //if ( property.GetRelationalTypeMapping().StoreType.ToLower() == "display" ) 
              //  bIsIdentity = true ;

 

            foreach (var dataAnnotation in dataAnnotations)
            {
            /*
               //if ( ( dataAnnotation.Type == typeof (KeyAttribute) ) && property.ClrType.FullName == "System.Int32" ) 
                 //  bIsIdentity = true ;
                   // jy to fix, use identity column even if using fluent api

               if ( dataAnnotation.Type == typeof (KeyAttribute)  && property.GetRelationalTypeMapping().StoreType.ToLower() == "integer" ) 
                   bIsIdentity = true ;
               else 
                   bIsIdentity = false ;


               if ( property.Name.ToLower().Contains ("itemid") )
               {
                   var yy = property.Name ;
               }

               //jy, No need for DatabaseGeneratedOption for it is PK with integer type 
               bIsIdentity = false ;
            */


            
            #line default
            #line hidden
            
            #line 231 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
 if ( bIsIdentity ) { 
            
            #line default
            #line hidden
            this.Write("  \r\n   [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\r\n");
            
            #line 233 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
 } 
            
            #line default
            #line hidden
            this.Write("//#if MVVM\r\n   ");
            
            #line 235 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToMvvmAttr (code.Fragment(dataAnnotation) )));
            
            #line default
            #line hidden
            this.Write("\r\n//#else\r\n   ");
            
            #line 237 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Fragment(dataAnnotation)));
            
            #line default
            #line hidden
            this.Write("\r\n//#endif\r\n\r\n");
            
            #line 240 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

            }
        }

        usings.AddRange(code.GetRequiredUsings(property.ClrType));

        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        var needsInitializer = Options.UseNullableReferenceTypes && !property.IsNullable && !property.ClrType.IsValueType;


            
            #line default
            #line hidden
            this.Write("//#if MVVM\r\n    [ObservableProperty]\r\n    private ");
            
            #line 252 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Reference(property.ClrType)));
            
            #line default
            #line hidden
            
            #line 252 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 252 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 252 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsInitializer ? " = null!;" : ";"));
            
            #line default
            #line hidden
            this.Write(" \r\n//#else\r\n    public ");
            
            #line 254 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Reference(property.ClrType)));
            
            #line default
            #line hidden
            
            #line 254 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 254 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; }");
            
            #line 254 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsInitializer ? " = null!;" : ""));
            
            #line default
            #line hidden
            this.Write("\r\n//#endif\r\n");
            
            #line 256 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

        firstProperty = false;
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in navigation.GetDataAnnotations(annotationCodeGenerator))
            {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 269 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Fragment(dataAnnotation)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 270 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

            }
        }

        var targetType = navigation.TargetEntityType.Name;
        if (navigation.IsCollection)
        {

            
            #line default
            #line hidden
            this.Write("//#if MVVM\r\n    public virtual ICollection<");
            
            #line 279 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetType));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 279 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(navigation.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; } = new ObservableCollection<");
            
            #line 279 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetType));
            
            #line default
            #line hidden
            this.Write(">();\r\n//#else\r\n    public virtual ICollection<");
            
            #line 281 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetType));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 281 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(navigation.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; } = new List<");
            
            #line 281 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetType));
            
            #line default
            #line hidden
            this.Write(">();\r\n//#endif\r\n\r\n");
            
            #line 284 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

        }
        else
        {
            var needsNullable = Options.UseNullableReferenceTypes && !(navigation.ForeignKey.IsRequired && navigation.IsOnDependent);
            var needsInitializer = Options.UseNullableReferenceTypes && navigation.ForeignKey.IsRequired && navigation.IsOnDependent;

            
            #line default
            #line hidden
            this.Write("    public virtual ");
            
            #line 291 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(targetType));
            
            #line default
            #line hidden
            
            #line 291 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsNullable ? "?" : ""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 291 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(navigation.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; }");
            
            #line 291 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(needsInitializer ? " = null!;" : ""));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 292 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

        }
    }

    foreach (var skipNavigation in EntityType.GetSkipNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in skipNavigation.GetDataAnnotations(annotationCodeGenerator))
            {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 305 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(code.Fragment(dataAnnotation)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 306 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

            }
        }

            
            #line default
            #line hidden
            this.Write("    public virtual ICollection<");
            
            #line 310 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(skipNavigation.TargetEntityType.Name));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 310 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(skipNavigation.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; } = new List<");
            
            #line 310 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(skipNavigation.TargetEntityType.Name));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 311 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 315 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 322 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(ns));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 323 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);

            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 1 "U:\EFTemplate\EFTemplate\CodeTemplates\EFCore\entityType.t4"

private global::Microsoft.EntityFrameworkCore.Metadata.IEntityType _EntityTypeField;

/// <summary>
/// Access the EntityType parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType
{
    get
    {
        return this._EntityTypeField;
    }
}

private global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions _OptionsField;

/// <summary>
/// Access the Options parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions Options
{
    get
    {
        return this._OptionsField;
    }
}

private string _NamespaceHintField;

/// <summary>
/// Access the NamespaceHint parameter of the template.
/// </summary>
private string NamespaceHint
{
    get
    {
        return this._NamespaceHintField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool EntityTypeValueAcquired = false;
if (this.Session.ContainsKey("EntityType"))
{
    this._EntityTypeField = ((global::Microsoft.EntityFrameworkCore.Metadata.IEntityType)(this.Session["EntityType"]));
    EntityTypeValueAcquired = true;
}
if ((EntityTypeValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "EntityType");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::Microsoft.EntityFrameworkCore.Metadata.IEntityType));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._EntityTypeField = ((global::Microsoft.EntityFrameworkCore.Metadata.IEntityType)(tc.ConvertFrom(parameterValue)));
            EntityTypeValueAcquired = true;
        }
        else
        {
            this.Error("The type \'Microsoft.EntityFrameworkCore.Metadata.IEntityType\' of the parameter \'E" +
                    "ntityType\' did not match the type of the data passed to the template.");
        }
    }
}
if ((EntityTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EntityType");
    if ((data != null))
    {
        this._EntityTypeField = ((global::Microsoft.EntityFrameworkCore.Metadata.IEntityType)(data));
    }
}
bool OptionsValueAcquired = false;
if (this.Session.ContainsKey("Options"))
{
    this._OptionsField = ((global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions)(this.Session["Options"]));
    OptionsValueAcquired = true;
}
if ((OptionsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "Options");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._OptionsField = ((global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions)(tc.ConvertFrom(parameterValue)));
            OptionsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions\' o" +
                    "f the parameter \'Options\' did not match the type of the data passed to the templ" +
                    "ate.");
        }
    }
}
if ((OptionsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Options");
    if ((data != null))
    {
        this._OptionsField = ((global::Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions)(data));
    }
}
bool NamespaceHintValueAcquired = false;
if (this.Session.ContainsKey("NamespaceHint"))
{
    this._NamespaceHintField = ((string)(this.Session["NamespaceHint"]));
    NamespaceHintValueAcquired = true;
}
if ((NamespaceHintValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "NamespaceHint");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._NamespaceHintField = ((string)(tc.ConvertFrom(parameterValue)));
            NamespaceHintValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'NamespaceHint\' did not match the type " +
                    "of the data passed to the template.");
        }
    }
}
if ((NamespaceHintValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
    if ((data != null))
    {
        this._NamespaceHintField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class entityTypeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
